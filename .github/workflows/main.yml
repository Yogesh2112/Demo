name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Deploy-Backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set Backend Vercel Project ID
        run: echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_BACKEND_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Pull Vercel Environment Information for Backend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./server

      - name: Build Backend Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./server

      - name: Deploy Backend Project Artifacts to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./server

  Deploy-Frontend:
    runs-on: ubuntu-latest
    needs: Deploy-Backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set Frontend Vercel Project ID
        run: echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Pull Vercel Environment Information for Frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./client

      - name: Build Frontend Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./client

      - name: Deploy Frontend Project Artifacts to Vercel
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./client
